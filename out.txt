length = n = 1; number of bits required to store each key = k = 32.

Checking algorithms' fairness: Ok, passed 100 tests.

List.sorting ordered list:
Real: 00:00:00.000, CPU: 00:00:00.003, GC gen0: 0, gen1: 0
List.sorting reversed list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0
List.sorting shuffled list:
Real: 00:00:00.000, CPU: 00:00:00.002, GC gen0: 0, gen1: 0

*** O(n^2) sorting algorithms. ***

SelectionSorting ordered list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0
SelectionSorting reversed list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0
SelectionSorting shuffled list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0

BubbleSorting ordered list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0
BubbleSorting reversed list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0
BubbleSorting shuffled list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0

InsertionSorting ordered list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0
InsertionSorting reversed list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0
InsertionSorting shuffled list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0

*** O(n·log(n)) sorting algorithms. ***

QuickSorting ordered list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0
QuickSorting reversed list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0
QuickSorting reversed list:
Real: 00:00:00.000, CPU: 00:00:00.001, GC gen0: 0, gen1: 0

MergeSorting ordered list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0
MergeSorting reversed list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0
MergeSorting reversed list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0

HeapSorting ordered list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0
HeapSorting reversed list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0
HeapSorting reversed list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0

*** O(k·n) (non-comparative) sorting algorithm. ***

RadixSorting ordered list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0
RadixSorting reversed list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0
RadixSorting shuffled list:
Real: 00:00:00.000, CPU: 00:00:00.000, GC gen0: 0, gen1: 0
